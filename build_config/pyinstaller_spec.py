# -*- coding: utf-8 -*-
"""
PyInstaller 仕様ファイル生成スクリプト

Task 13: PyInstaller実行ファイル生成
WabiMailの実行ファイルを生成するための設定スクリプトです。
"""

import os
import sys
import platform
from pathlib import Path

# プロジェクトルートを取得
PROJECT_ROOT = Path(__file__).parent.parent
SRC_DIR = PROJECT_ROOT / "src"
RESOURCES_DIR = PROJECT_ROOT / "resources"
ASSETS_DIR = RESOURCES_DIR / "assets"

# プラットフォーム別設定
PLATFORM = platform.system()
IS_WINDOWS = PLATFORM == "Windows"
IS_MACOS = PLATFORM == "Darwin"
IS_LINUX = PLATFORM == "Linux"

def create_spec_content():
    """PyInstaller specファイルの内容を生成"""
    
    # アイコンファイルの設定
    if IS_WINDOWS:
        icon_file = str(ASSETS_DIR / "icons" / "wabimail.ico")
    elif IS_MACOS:
        icon_file = str(ASSETS_DIR / "icons" / "wabimail.icns")
    else:
        icon_file = str(ASSETS_DIR / "icons" / "wabimail.png")
    
    # 必要なデータファイル
    datas = [
        # 設定ファイル
        (str(PROJECT_ROOT / "config.yaml"), "config"),
        # アセット
        (str(ASSETS_DIR), "assets"),
        # 証明書（存在する場合）
        (str(PROJECT_ROOT / "credentials.json"), ".") if (PROJECT_ROOT / "credentials.json").exists() else None,
    ]
    
    # Noneを除外
    datas = [d for d in datas if d is not None]
    
    # 隠しインポート（動的にインポートされるモジュール）
    hiddenimports = [
        "tkinter",
        "tkinter.ttk",
        "tkinter.messagebox",
        "tkinter.filedialog",
        "tkinter.scrolledtext",
        "PIL",
        "PIL.Image",
        "PIL.ImageTk",
        "cryptography",
        "cryptography.fernet",
        "yaml",
        "pyyaml",
        "sqlite3",
        "email",
        "email.mime",
        "email.mime.text",
        "email.mime.multipart",
        "email.mime.base",
        "imaplib",
        "smtplib",
        "poplib",
        "google.auth",
        "google.auth.transport.requests",
        "google_auth_oauthlib",
        "google_auth_oauthlib.flow",
        "googleapiclient",
        "googleapiclient.discovery",
        "requests",
        "urllib3",
        "certifi",
    ]
    
    spec_content = f'''# -*- coding: utf-8 -*-
# PyInstaller spec file for WabiMail
# Generated by build_config/pyinstaller_spec.py

import sys
import os
from pathlib import Path

block_cipher = None

# アプリケーション情報
APP_NAME = "WabiMail"
APP_VERSION = "1.0.0"
APP_DESCRIPTION = "侘び寂びの美学を体現したメールクライアント"
APP_AUTHOR = "WabiMail Development Team"
APP_COPYRIGHT = "Copyright (C) 2025 WabiMail Development Team"

a = Analysis(
    ['{str(PROJECT_ROOT / "src" / "main.py")}'],
    pathex=['{str(PROJECT_ROOT)}', '{str(SRC_DIR)}'],
    binaries=[],
    datas={datas},
    hiddenimports={hiddenimports},
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=[
        'matplotlib',
        'numpy',
        'pandas',
        'scipy',
        'pytest',
        'jupyterlab',
        'notebook',
    ],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

# プラットフォーム別設定
if sys.platform == "win32":
    # Windows用設定
    exe = EXE(
        pyz,
        a.scripts,
        a.binaries,
        a.zipfiles,
        a.datas,
        [],
        name='WabiMail',
        debug=False,
        bootloader_ignore_signals=False,
        strip=False,
        upx=True,
        upx_exclude=[],
        runtime_tmpdir=None,
        console=False,  # GUIアプリなのでコンソールなし
        disable_windowed_traceback=False,
        argv_emulation=False,
        target_arch=None,
        codesign_identity=None,
        entitlements_file=None,
        icon='{icon_file}',
        version_file=None,  # バージョン情報ファイル（後で追加可能）
    )
    
elif sys.platform == "darwin":
    # macOS用設定
    exe = EXE(
        pyz,
        a.scripts,
        [],
        exclude_binaries=True,
        name='WabiMail',
        debug=False,
        bootloader_ignore_signals=False,
        strip=False,
        upx=True,
        console=False,
        disable_windowed_traceback=False,
        argv_emulation=False,
        target_arch=None,
        codesign_identity=None,
        entitlements_file=None,
        icon='{icon_file}',
    )
    
    coll = COLLECT(
        exe,
        a.binaries,
        a.zipfiles,
        a.datas,
        strip=False,
        upx=True,
        upx_exclude=[],
        name='WabiMail',
    )
    
    app = BUNDLE(
        coll,
        name='WabiMail.app',
        icon='{icon_file}',
        bundle_identifier='com.wabimail.app',
        version=APP_VERSION,
        info_plist={{
            'CFBundleName': APP_NAME,
            'CFBundleDisplayName': APP_NAME,
            'CFBundleGetInfoString': APP_DESCRIPTION,
            'CFBundleIdentifier': 'com.wabimail.app',
            'CFBundleVersion': APP_VERSION,
            'CFBundleShortVersionString': APP_VERSION,
            'NSHighResolutionCapable': 'True',
            'NSHumanReadableCopyright': APP_COPYRIGHT,
            'NSRequiresAquaSystemAppearance': 'False',  # ダークモード対応
            'LSMinimumSystemVersion': '10.13.0',
        }},
    )
    
else:
    # Linux用設定
    exe = EXE(
        pyz,
        a.scripts,
        a.binaries,
        a.zipfiles,
        a.datas,
        [],
        name='wabimail',
        debug=False,
        bootloader_ignore_signals=False,
        strip=False,
        upx=True,
        upx_exclude=[],
        runtime_tmpdir=None,
        console=False,
        disable_windowed_traceback=False,
        argv_emulation=False,
        target_arch=None,
        codesign_identity=None,
        entitlements_file=None,
        icon='{icon_file}',
    )
'''
    
    return spec_content


def create_runtime_hook():
    """ランタイムフック作成（必要に応じて）"""
    
    hook_content = '''# -*- coding: utf-8 -*-
"""
PyInstaller ランタイムフック
実行時の環境設定を行います
"""

import os
import sys

# SSL証明書の設定（requests用）
if hasattr(sys, '_MEIPASS'):
    import certifi
    os.environ['SSL_CERT_FILE'] = certifi.where()
    os.environ['REQUESTS_CA_BUNDLE'] = certifi.where()

# Tkinterの設定
if sys.platform == "darwin":
    # macOSでのTkinter設定
    os.environ['TK_SILENCE_DEPRECATION'] = '1'
'''
    
    runtime_hook_path = PROJECT_ROOT / "build_config" / "runtime_hook.py"
    with open(runtime_hook_path, 'w', encoding='utf-8') as f:
        f.write(hook_content)
    
    return str(runtime_hook_path)


def create_version_file():
    """Windows用バージョンファイル作成"""
    
    if not IS_WINDOWS:
        return None
    
    version_content = '''# -*- coding: utf-8 -*-
# Windows version file for WabiMail

VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=(1, 0, 0, 0),
    prodvers=(1, 0, 0, 0),
    mask=0x3f,
    flags=0x0,
    OS=0x40004,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
  ),
  kids=[
    StringFileInfo(
      [
      StringTable(
        u'040904B0',
        [StringStruct(u'CompanyName', u'WabiMail Development Team'),
        StringStruct(u'FileDescription', u'WabiMail - 侘び寂びメールクライアント'),
        StringStruct(u'FileVersion', u'1.0.0.0'),
        StringStruct(u'InternalName', u'wabimail'),
        StringStruct(u'LegalCopyright', u'Copyright (C) 2025 WabiMail Development Team'),
        StringStruct(u'OriginalFilename', u'WabiMail.exe'),
        StringStruct(u'ProductName', u'WabiMail'),
        StringStruct(u'ProductVersion', u'1.0.0.0')])
      ]), 
    VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
  ]
)
'''
    
    version_file_path = PROJECT_ROOT / "build_config" / "version_info.py"
    with open(version_file_path, 'w', encoding='utf-8') as f:
        f.write(version_content)
    
    return str(version_file_path)


def main():
    """メイン関数"""
    print("🌸 WabiMail PyInstaller 仕様ファイル生成")
    print("=" * 60)
    
    # build_configディレクトリ作成
    build_dir = PROJECT_ROOT / "build_config"
    build_dir.mkdir(exist_ok=True)
    
    # specファイル作成
    spec_content = create_spec_content()
    spec_file_path = PROJECT_ROOT / "WabiMail.spec"
    
    with open(spec_file_path, 'w', encoding='utf-8') as f:
        f.write(spec_content)
    
    print(f"✅ Specファイル作成: {spec_file_path}")
    
    # ランタイムフック作成
    runtime_hook = create_runtime_hook()
    print(f"✅ ランタイムフック作成: {runtime_hook}")
    
    # Windows用バージョンファイル作成
    if IS_WINDOWS:
        version_file = create_version_file()
        print(f"✅ バージョンファイル作成: {version_file}")
    
    print()
    print("📋 次のステップ:")
    print("1. PyInstallerをインストール: pip install pyinstaller")
    print("2. ビルド実行: pyinstaller WabiMail.spec")
    print(f"3. 実行ファイルは dist/ ディレクトリに生成されます")
    
    return spec_file_path


if __name__ == "__main__":
    main()